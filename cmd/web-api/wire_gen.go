// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"web-api/internal/biz"
	"web-api/internal/conf"
	"web-api/internal/data"
	"web-api/internal/server"
	"web-api/internal/service"

	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	// "github.com/go-kratos/kratos/v2/transport/grpc/resolver/discovery"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, registry *conf.Registry, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	discovery := data.NewDiscovery(registry)
	userClient := data.NewUserServiceClient(discovery)
	dataData, cleanup, err := data.NewData(logger, userClient)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewWebRepo(logger, dataData)
	userUserCase := biz.NewUserUseCase(userRepo, logger)
	userService := service.NewWebsrvService(userUserCase, logger)
	httpServer := server.NewHTTPServer(confServer, userService, logger)
	grpcServer := server.NewGRPCServer(confServer, userService, logger)
	app := newApp(logger, httpServer, grpcServer)
	return app, func() {
		cleanup()
	}, nil
}
